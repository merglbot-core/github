name: Automated Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.github/workflows/docs-*.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty for auto)'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/changelog
      
      - name: Determine version
        id: version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Use semantic-release to determine next version (robust JSON parsing)
            VERSION=$(npx semantic-release --dry-run --no-ci --stdout | jq -r '.nextRelease.version // empty')
            if [ -z "$VERSION" ]; then
              echo "No release needed"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Generate changelog
        id: changelog
        if: steps.version.outputs.skip != 'true'
        run: |
          # Generate changelog for the version
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi
          
          cat > CHANGELOG_TEMP.md << EOF
          # Release v${{ steps.version.outputs.version }}
          
          ## 🚀 What's Changed
          EOF

          # Append commits without shell expansion
          echo "${COMMITS}" >> CHANGELOG_TEMP.md

          cat >> CHANGELOG_TEMP.md << EOF

          ## 📊 Statistics
          - Commits: $(git rev-list ${PREV_TAG:+${PREV_TAG}..}HEAD --count)
          - Contributors: $(git log ${PREV_TAG:+${PREV_TAG}..}HEAD --format="%aN" | sort -u | wc -l)
          - Files changed: $(git diff ${PREV_TAG:+${PREV_TAG}..}HEAD --stat | tail -1)
          
          **Full Changelog**: ${PREV_TAG:+${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/compare/${PREV_TAG}...v${{ steps.version.outputs.version }}}
          EOF
          
          # Save to output
          {
            echo 'changelog<<EOF'
            cat CHANGELOG_TEMP.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT
      
      - name: Create Git tag
        if: steps.version.outputs.skip != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"
      
      - name: Create GitHub Release
        if: steps.version.outputs.skip != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes "${{ steps.changelog.outputs.changelog }}" \
            --verify-tag \
            --latest
          # If you want to support draft/prerelease, add --draft or --prerelease flags as needed
      
      - name: Update GITHUB_STEP_SUMMARY
        if: always()
        run: |
          if [ "${{ steps.version.outputs.skip }}" == "true" ]; then
            echo "### ⏭️ Release Skipped" >> $GITHUB_STEP_SUMMARY
            echo "No changes requiring a release were detected." >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🎉 Release v${{ steps.version.outputs.version }} Created" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
          fi
  
  notify:
    needs: release
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify Slack
        if: secrets.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🚀 New Release: v${{ needs.release.outputs.version }}",
              "attachments": [{
                "color": "good",
                "fields": [
                  {
                    "title": "Version",
                    "value": "v${{ needs.release.outputs.version }}",
                    "short": true
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Release URL",
                    "value": "${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.version }}"
                  }
                ]
              }]
            }'