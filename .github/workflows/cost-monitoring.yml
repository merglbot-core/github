name: Cost Monitoring

on:
  schedule:
    - cron: "0 8 * * *"  # Daily at 08:00 UTC
  workflow_dispatch:
    inputs:
      month:
        description: "Month to analyze (YYYY-MM)"
        required: false
        type: string
      dry_run:
        description: "Skip notifications (dry run)"
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write  # For WIF/OIDC
  issues: write    # For creating issues
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run:
    name: Generate Cost Report
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: platform/tools/cost-monitoring/pyproject.toml

      - name: Authenticate to GCP via WIF
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER }}
          service_account: ${{ vars.GCP_WIF_SERVICE_ACCOUNT }}
          export_environment_variables: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd platform/tools/cost-monitoring
          pip install -e .

      - name: Copy config templates if needed
        run: |
          cd platform/tools/cost-monitoring
          if [ ! -f config/settings.yml ]; then
            cp config/settings.example.yml config/settings.yml
          fi
          if [ ! -f config/thresholds.yml ]; then
            cp config/thresholds.example.yml config/thresholds.yml
          fi

      - name: Generate cost report
        id: generate
        working-directory: platform/tools/cost-monitoring
        continue-on-error: true
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          # Build command
          CMD="python -m cost_monitoring.cli generate --outdir reports"
          
          # Add month if specified
          if [ -n "${{ inputs.month }}" ]; then
            CMD="$CMD --month ${{ inputs.month }}"
          fi
          
          # Add dry-run if specified
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            CMD="$CMD --dry-run"
          fi
          
          # Run with soft-fail to continue even if thresholds exceeded
          CMD="$CMD --soft-fail"
          
          echo "Running: $CMD"
          $CMD || EXIT=$?
          
          echo "reports_dir=$(pwd)/reports" >> "$GITHUB_OUTPUT"
          echo "exit_code=${EXIT:-0}" >> "$GITHUB_OUTPUT"

      - name: Generate Step Summary
        if: always()
        working-directory: platform/tools/cost-monitoring
        run: |
          echo "## üí∞ Cost Monitoring Report" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Check if markdown report exists
          MD_FILE=$(find reports -name "*.md" -type f | head -1)
          if [ -f "$MD_FILE" ]; then
            # Add the markdown report to summary (truncate if too long)
            head -n 200 "$MD_FILE" >> "$GITHUB_STEP_SUMMARY"
            
            if [ $(wc -l < "$MD_FILE") -gt 200 ]; then
              echo "" >> "$GITHUB_STEP_SUMMARY"
              echo "*... Report truncated. See artifacts for full report.*" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "‚ùå No report generated" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "---" >> "$GITHUB_STEP_SUMMARY"
          echo "- Exit code: ${{ steps.generate.outputs.exit_code }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Reports directory: ${{ steps.generate.outputs.reports_dir }}" >> "$GITHUB_STEP_SUMMARY"

      - name: Upload cost reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cost-reports-${{ github.run_id }}
          path: platform/tools/cost-monitoring/reports/
          retention-days: 90

      - name: Check exit code
        if: steps.generate.outputs.exit_code != '0'
        run: |
          echo "‚ö†Ô∏è Cost monitoring detected issues (exit code: ${{ steps.generate.outputs.exit_code }})"
          echo "Review the reports and GitHub issue for details."