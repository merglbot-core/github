name: Claude PR Assistant (v2 preview)

on:
  workflow_call:
    inputs:
      trigger_labels:
        type: string
        required: false
        default: "ai-review"
      skip_labels:
        type: string
        required: false
        default: "no-ai"
      model:
        type: string
        required: false
        default: "claude-3-5-sonnet-20241022"
      temperature:
        type: number
        required: false
        default: 0.2
      max_output_chars:
        type: number
        required: false
        default: 4000
      max_diff_lines:
        type: number
        required: false
        default: 8000
    secrets:
      ANTHROPIC_API_KEY:
        required: false

permissions:
  contents: read
  pull-requests: write

jobs:
  ai_review:
    runs-on: ubuntu-latest
    concurrency:
      group: claude-pr-v2-preview-${{ github.event.pull_request.number || github.run_id }}
      cancel-in-progress: true
    steps:
      - name: Gate by event (pull_request only)
        id: gate_event
        run: |
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "should_run=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_run=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        if: steps.gate_event.outputs.should_run == 'true'
        uses: actions/checkout@v4

      - name: Compute label gates
        id: gate_labels
        if: steps.gate_event.outputs.should_run == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tri = (s)=> (s||'').split(',').map(x=>x.trim()).filter(Boolean);
            const trig = tri('${{ inputs.trigger_labels }}');
            const skip = tri('${{ inputs.skip_labels }}');
            const labels = (context.payload.pull_request?.labels||[]).map(l=>l.name);
            const hasTrig = trig.length===0 || trig.some(t=>labels.includes(t));
            const hasSkip = skip.some(s=>labels.includes(s));
            core.setOutput('should_run', (hasTrig && !hasSkip) ? 'true':'false');

      - name: Summary gate info
        if: always()
        run: |
          echo "### AI PR Assistant (v2 preview) â€“ gating" >> $GITHUB_STEP_SUMMARY
          echo "- event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- should_run: ${{ steps.gate_labels.outputs.should_run }}" >> $GITHUB_STEP_SUMMARY

      - name: Short-circuit if gated off
        if: steps.gate_labels.outputs.should_run != 'true'
        run: echo "Gated off by labels"; exit 0

      - name: Fetch PR diff (truncated)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          pr="${{ github.event.pull_request.number }}"
          gh pr diff "$pr" --patch > pr.diff || true
          head -n "${{ inputs.max_diff_lines }}" pr.diff > pr.trunc.diff || true

      - name: Build prompt
        run: |
          set -euo pipefail
          mkdir -p .tmp
          printf "%s" "${{ github.event.pull_request.title }}" | head -c 300 > .tmp/title.txt
          printf "%s" "${{ github.event.pull_request.body }}"  | head -c 2000 > .tmp/body.txt
          {
            echo "You are a helpful, cautious code reviewer."
            echo "Rules: no secrets in output; least-privilege; safe shell; no destructive infra."
            echo ""
            echo "PR title:"; cat .tmp/title.txt
            echo ""; echo "PR body:"; cat .tmp/body.txt
            echo ""; echo "PR diff:"; cat pr.trunc.diff
          } > .tmp/prompt.txt

      - name: Call Anthropic (preview)
        id: llm
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${ANTHROPIC_API_KEY:-}" ]; then
            printf "LLM not configured.\n" > .tmp/review.md
            exit 0
          fi
          payload=$(jq -n \
            --arg model "${{ inputs.model }}" \
            --arg prompt "$(cat .tmp/prompt.txt)" \
            '{model:$model,max_tokens:1800,messages:[{role:"user",content:$prompt}],temperature:0.2}')
          resp=$(curl -sS https://api.anthropic.com/v1/messages \
            -H "content-type: application/json" \
            -H "x-api-key: ${ANTHROPIC_API_KEY}" \
            -H "anthropic-version: 2023-06-01" \
            -d "$payload")
          echo "$resp" | jq -r '.content[0].text // ""' | head -c "${{ inputs.max_output_chars }}" > .tmp/review.md

      - name: Create or update PR comment (idempotent)
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: .tmp/review.md
          edit-mode: replace
          reactions: eyes
