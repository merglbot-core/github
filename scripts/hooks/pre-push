#!/usr/bin/env bash
# Pre-push hook for comprehensive validation
# Based on WARP standards for security and code quality

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}üîç Running pre-push validation...${NC}"

# Parse push information
remote="${1:-}"
url="${2:-}"

# Validate we have necessary parameters
if [ -z "$remote" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No remote specified, running basic checks only${NC}"
fi

# Get commits being pushed
z40=0000000000000000000000000000000000000000

# Determine diff range for validation
upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || true)
if [ -n "$upstream" ]; then
    range="$upstream..HEAD"
    files=$(git diff --name-only "$range" -- 2>/dev/null | head -100 || true)
else
    # Fallback to last 10 commits if no upstream
    range="HEAD~10..HEAD"
    files=$(git diff --name-only "$range" -- 2>/dev/null | head -100 || true)
fi

if [ -z "${files}" ]; then
    echo "No files changed in push range"
    exit 0
fi

echo "Validating files in range: $range"

# Arrays to store validation results
ERRORS=0
WARNINGS=0

# Function to log errors
log_error() {
    echo -e "${RED}‚ùå ERROR: $1${NC}"
    ((ERRORS++))
}

# Function to log warnings
log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: $1${NC}"
    ((WARNINGS++))
}

# Function to log success
log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# 1. YAML Validation
echo -e "${BLUE}[1/5] Validating YAML files...${NC}"
yaml_files=$(echo "$files" | grep -E '\.(ya?ml)$' || true)
if [ -n "$yaml_files" ]; then
    # Process each file with proper quoting
    while IFS= read -r f; do
        if [ -f "$f" ]; then
            if ! python3 -c "import yaml; yaml.safe_load(open('$f', 'r', encoding='utf-8'))" 2>/dev/null; then
                log_error "YAML invalid: $f"
            else
                echo "  ‚úì $f"
            fi
        fi
    done <<< "$yaml_files"
else
    echo "  No YAML files to validate"
fi

# 2. Shell Script Validation
echo -e "${BLUE}[2/5] Validating shell scripts...${NC}"
shell_files=$(echo "$files" | grep -E '\.(sh|bash)$' || true)
if [ -n "$shell_files" ]; then
    # Process each file with proper quoting
    while IFS= read -r f; do
        if [ -f "$f" ]; then
            if ! bash -n "$f" 2>/dev/null; then
                log_error "Shell syntax error: $f"
            else
                echo "  ‚úì $f"
            fi
        fi
    done <<< "$shell_files"
else
    echo "  No shell scripts to validate"
fi

# 3. GitHub Actions Workflow Validation
echo -e "${BLUE}[3/5] Validating GitHub Actions workflows...${NC}"
workflow_files=$(echo "$files" | grep '^.github/workflows/.*\.yml$' || true)
if [ -n "$workflow_files" ]; then
    if command -v actionlint >/dev/null 2>&1; then
        # Process each file with proper quoting
        while IFS= read -r f; do
            if [ -f "$f" ]; then
                output="$(actionlint -color never "$f" 2>&1)"
                status=$?
                if [ $status -ne 0 ]; then
                    echo "$output" | head -20
                    log_warning "Workflow issues found in $f"
                else
                    echo "  ‚úì $f"
                fi
            fi
        done <<< "$workflow_files"
    else
        log_warning "actionlint not installed. Install with: brew install actionlint"
    fi
else
    echo "  No workflow files to validate"
fi

# 4. Secret Detection
echo -e "${BLUE}[4/5] Scanning for secrets...${NC}"
if command -v gitleaks >/dev/null 2>&1; then
    # Create temporary file for commits
    TEMP_COMMITS=$(mktemp -t commits.XXXXXX)
    git rev-list "$range" > "$TEMP_COMMITS" 2>/dev/null || true
    
    if [ -s "$TEMP_COMMITS" ]; then
        if ! gitleaks detect --source . --log-opts="$range" --verbose --no-banner 2>&1 | grep -v "no leaks found" | head -20; then
            log_error "Potential secrets detected!"
            rm -f "$TEMP_COMMITS"
            
            # Allow override with confirmation
            echo ""
            read -p "Type 'PUSH ANYWAY' to override (or press Enter to abort): " override_confirmation
            if [[ "$override_confirmation" != "PUSH ANYWAY" ]]; then
                echo "Push aborted. Please remove secrets and try again."
                exit 1
            fi
            log_warning "Proceeding with potential secrets - ensure you know what you're doing!"
        else
            log_success "No secrets detected"
        fi
    fi
    rm -f "$TEMP_COMMITS"
else
    log_warning "gitleaks not installed. Install with: brew install gitleaks"
fi

# 5. File Size Check
echo -e "${BLUE}[5/5] Checking file sizes...${NC}"
large_files=0
# Process each file with proper quoting
while IFS= read -r f; do
    if [ -f "$f" ]; then
        size=$(wc -c < "$f" 2>/dev/null || echo "0")
        if [ "$size" -gt 10485760 ]; then # 10MB
            log_warning "Large file: $f ($(($size / 1048576))MB)"
            ((large_files++))
        fi
    fi
done <<< "$files"
if [ $large_files -eq 0 ]; then
    echo "  No large files detected"
fi

# Summary
echo ""
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${BLUE}         VALIDATION SUMMARY         ${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}‚ùå Found $ERRORS error(s)${NC}"
    echo -e "${RED}Push aborted due to validation errors.${NC}"
    echo ""
    echo "To fix:"
    echo "  1. Resolve the errors listed above"
    echo "  2. Stage your fixes: git add <files>"
    echo "  3. Commit the fixes: git commit -m 'Fix validation errors'"
    echo "  4. Try pushing again"
    exit 1
elif [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found $WARNINGS warning(s)${NC}"
    echo -e "${GREEN}‚úÖ Push allowed with warnings${NC}"
else
    echo -e "${GREEN}‚úÖ All validations passed!${NC}"
fi

echo ""
exit 0
